apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-gatekeeper-allowedrepos-template
  namespace: open-cluster-management
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-allowedrepos-template
        spec:
          remediationAction: enforce
          severity: low
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: templates.gatekeeper.sh/v1beta1
                kind: ConstraintTemplate
                metadata:
                  name: k8sallowedrepos
                spec:
                  crd:
                    spec:
                      names:
                        kind: K8sAllowedRepos
                      validation:
                        openAPIV3Schema:
                          properties:
                            repos:
                              type: array
                              items:
                                type: string
                  targets:
                    - target: admission.k8s.gatekeeper.sh
                      rego: >
                        package k8sallowedrepos


                        violation[{"msg": msg}] {
                          container := input.review.object.spec.containers[_]
                          satisfied := [good | repo = input.parameters.repos[_] ; good = startswith(container.image, repo)]
                          not any(satisfied)
                          msg := sprintf("container <%v> has an invalid image repo <%v>, allowed repos are %v", [container.name, container.image, input.parameters.repos])
                        }


                        violation[{"msg": msg}] {
                          container := input.review.object.spec.initContainers[_]
                          satisfied := [good | repo = input.parameters.repos[_] ; good = startswith(container.image, repo)]
                          not any(satisfied)
                          msg := sprintf("initContainer <%v> has an invalid image repo <%v>, allowed repos are %v", [container.name, container.image, input.parameters.repos])
                        }


                        violation[{"msg": msg}] {
                          container := input.review.object.spec.ephemeralContainers[_]
                          satisfied := [good | repo = input.parameters.repos[_] ; good = startswith(container.image, repo)]
                          not any(satisfied)
                          msg := sprintf("ephemeralContainer <%v> has an invalid image repo <%v>, allowed repos are %v", [container.name, container.image, input.parameters.repos])
                        }
