apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-gatekeeper-requireprobe-template
  namespace: open-cluster-management
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gatekeeper-requireprobe-template
        spec:
          remediationAction: enforce
          severity: low
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: templates.gatekeeper.sh/v1beta1
                kind: ConstraintTemplate
                metadata:
                  name: k8srequiredprobes
                spec:
                  crd:
                    spec:
                      names:
                        kind: K8sRequiredProbes
                      validation:
                        openAPIV3Schema:
                          properties:
                            probes:
                              description: "A list of probes that are required (ex: `readinessProbe`)"
                              type: array
                              items:
                                type: string
                            probeTypes:
                              description: "The probe must define a field listed in `probeType` in order to satisfy the constraint (ex. `tcpSocket` satisfies `['tcpSocket', 'exec']`)"
                              type: array
                              items:
                                type: string
                  targets:
                    - target: admission.k8s.gatekeeper.sh
                      rego: |
                        package k8srequiredprobes

                        probe_type_set = probe_types {
                            probe_types := {type | type := input.parameters.probeTypes[_]}
                        }

                        violation[{"msg": msg}] {
                            container := input.review.object.spec.containers[_]
                            probe := input.parameters.probes[_]
                            probe_is_missing(container, probe)
                            msg := get_violation_message(container, input.review, probe)
                        }

                        probe_is_missing(ctr, probe) = true {
                            not ctr[probe]
                        }

                        probe_is_missing(ctr, probe) = true {
                            probe_field_empty(ctr, probe)
                        }

                        probe_field_empty(ctr, probe) = true {
                            probe_fields := {field | ctr[probe][field]}
                            diff_fields := probe_type_set - probe_fields
                            count(diff_fields) == count(probe_type_set)
                        }

                        get_violation_message(container, review, probe) = msg {
                            msg := sprintf("Container <%v> in your <%v> <%v> has no <%v>", [container.name, review.kind.kind, review.object.metadata.name, probe])
                        }
