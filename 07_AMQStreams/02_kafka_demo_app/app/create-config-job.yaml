---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-kafka-config
spec:
  backoffLimit: 4
  template:
    spec:
      serviceAccount: kafka-manage
      serviceAccountName: kafka-manage
      containers:
        - name: create-kafka-config
          image: quay.io/rhtw/tools:1.2.0
          imagePullPolicy: IfNotPresent
          command: ["/bin/bash"]
          args:
            - -ec
            - |-
              # /bin/bash

              export NAMESPACE=kafka-demo

              export CLUSTER_NAME=$(oc get kafka -n $NAMESPACE |awk 'NR > 1 {print $1}')

              # create ssl jks secret
              oc get secret $CLUSTER_NAME-cluster-ca-cert -n $NAMESPACE -o jsonpath='{.data.ca\.crt}' | base64 --decode > ~/tmp/ca.crt

              oc get secret $CLUSTER_NAME-cluster-ca-cert -n $NAMESPACE -o jsonpath='{.data.ca\.password}' | base64 --decode > ~/tmp/ca.password

              export CERT_FILE_PATH=~/tmp/ca.crt
              export CERT_PASSWORD_FILE_PATH=~/tmp/ca.password
              export KEYSTORE_LOCATION=/tmp/truststore.jks
              export PASSWORD=`cat $CERT_PASSWORD_FILE_PATH`

              if [ -f $KEYSTORE_LOCATION ]; then
                echo "The truststore.jks exists."
              else
                yes "yes" | keytool -keystore $KEYSTORE_LOCATION -alias kafka-cert -import -file ~/tmp/ca.crt -storepass $PASSWORD
              fi

              export TRUSTSTORE_SECRET=$(oc get secret kafka-truststore -n $NAMESPACE |awk 'NR > 1 {print $1}')

              if [ -n "$TRUSTSTORE_SECRET" ]; then
                echo "delete existing secret."
                oc delete secret kafka-truststore -n $NAMESPACE;
                oc create secret generic kafka-truststore -n $NAMESPACE --from-file=truststore.jks=$KEYSTORE_LOCATION --from-literal=password=$PASSWORD
              else
                echo "create new secret."
                oc create secret generic kafka-truststore -n $NAMESPACE --from-file=truststore.jks=$KEYSTORE_LOCATION --from-literal=password=$PASSWORD
              fi

              # create kafka-config configmap
              export BOOTSTRAP_SERVER=$(oc get route $CLUSTER_NAME-kafka-secure-bootstrap -o jsonpath='{.spec.host}')
              export SECURITY_PROTOCOL=SASL_SSL
              export SASL_MECHANISM=SCRAM-SHA-512

              export KAFKA_CONFIG=$(oc get configmap kafka-config -n $NAMESPACE |awk 'NR > 1 {print $1}')

              if [ -n "$KAFKA_CONFIG" ]; then
                echo "delete existing configmap."
                oc delete configmap kafka-config -n $NAMESPACE;
                oc create configmap kafka-config -n $NAMESPACE --from-literal=bootstrap_server=$BOOTSTRAP_SERVER --from-literal=security_protocol=$SECURITY_PROTOCOL --from-literal=sasl_mechanism=$SASL_MECHANISM
              else
                echo "create new configmap."
                oc create configmap kafka-config -n $NAMESPACE --from-literal=bootstrap_server=$BOOTSTRAP_SERVER --from-literal=security_protocol=$SECURITY_PROTOCOL --from-literal=sasl_mechanism=$SASL_MECHANISM
              fi
      restartPolicy: Never
